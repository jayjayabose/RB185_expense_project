#! /usr/bin/env ruby

=begin
Requirements
  1. The list command should display a count of expenses in addition to the total of all expenses:

    $ ./expense list
    There are 4 expenses.
      1 | 2016-04-07 |        14.56 | Pencils
      2 | 2016-04-07 |         3.29 | Coffee
      3 | 2016-04-07 |        49.99 | Text Editor
      4 | 2016-04-07 |         3.59 | More Coffee
    --------------------------------------------------
    Total                     71.43

  2. If there is only one expense, the output should use appropriate grammar:

      There is 1 expense.
      1 | 2016-04-07 |        14.56 | Pencils
    --------------------------------------------------
    Total                     14.56

  3. if there are no expenses
  There are no expenses.

  4. Samee for search

I: 
#display_result
  init record count
  init sum
    incremente sum on each

=end

require 'pg'
require "io/console"
require 'pry'

class ExpenseData

  def initialize
    @connection = PG.connect(:dbname => "expenses")
    setup_schema
  end

  def list_expenses
    result = @connection.exec("SELECT * FROM expenses ORDER BY created_on ASC;")
    display_result(result)
  end
  
  def add_expense(amount, memo)
    date = Date.today
    sql = "INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, $3);"
    result = @connection.exec_params(sql, [amount, memo, date])
  end
  
  def search(search_term)
    sql = "SELECT * FROM expenses WHERE memo ILIKE $1;"
    result = @connection.exec_params(sql, ["%#{search_term}%"])
    display_result(result)
  end
  
  def delete_expense(id)
    sql = "SELECT * FROM expenses WHERE id = $1;"
    result = @connection.exec_params(sql, [id])

    if result.ntuples == 1
      sql = "DELETE FROM expenses WHERE id = $1;"
      @connection.exec_params(sql, [id])

      puts "The following expense has been deleted:"
      display_result(result)
    else
      puts "There is no expense with the id '#{id}'."
    end    
  end

  def delete_all_expenses
    @connection.exec("DELETE FROM expenses")
    puts "All expenses have been deleted."
  end

  private

  def setup_schema
    sql = "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'expenses';"
    if @connection.exec(sql) == 0
      sql = "CREATE TABLE expenses (
        id serial PRIMARY KEY,
        amount numeric(6,2) NOT NULL,
        memo text NOT NULL,
        created_on date NOT NULL
      );"
      connection.exec(sql) 
    end
  end

  def display_result(results)
    display_count(results)
    display_records(results)
  end

  def setup_schema
    result = @connection.exec <<~SQL
      SELECT COUNT(*) FROM information_schema.tables
      WHERE table_schema = 'public' AND table_name = 'expenses';
    SQL

    binding.pry

    if result[0]["count"] == "0"
      @connection.exec <<~SQL
      CREATE TABLE expenses (
        id serial PRIMARY KEY,
        amount numeric(6,2) NOT NULL,
        memo text NOT NULL,
        created_on date NOT NULL
      );
      SQL
    end
  end

  def display_records(results)
    total = results.field_values('amount').map(&:to_f).sum    

    results.each do |tuple|

      columns = [ tuple["id"].rjust(3),
      tuple["created_on"].rjust(10),
      tuple["amount"].rjust(12),
      tuple["memo"] ]
      
      puts columns.join(" | ")  
    end    
    puts "-" * 50
    puts "Total #{format('%.2f', total.to_s).rjust(25)}"
  end
end

class CLI
  def initialize
    @application = ExpenseData.new
  end

  def run(args)
    command = args.shift
    case command
    when "list"
      @application.list_expenses
    when "add"
      amount = args[0]
      memo = args[1]
      abort "You must provide an amount and memo." unless amount && memo  # could do more thorough validation here
      @application.add_expense(amount, memo)
    when "search"
      search_term = args[0]
      abort "You must provide a search term." unless search_term  # could do more thorough validation here
      @application.search(search_term)
    when "delete"
      id = args[0]
      abort "You must provide a record id." unless id  # could do more thorough validation here
      @application.delete_expense(id)
    when "clear"
      puts "This will remove all expenses. Are you sure? (y/n)"
      user_confirmation = ''
      loop do
        user_confirmation = $stdin.getch
        # binding.pry
        break if ['y', 'n'].include? user_confirmation
        puts "Invalid Response: Enter 'y' or 'n'"
        puts "This will remove all expenses. Are you sure? (y/n)"
      end
      if user_confirmation == 'y'
        @application.delete_all_expenses
      end
    else
      display_help
    end
  end

  def display_help
    puts <<~HELP
      An expense recording system
  
      Commands:
  
      add AMOUNT MEMO - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete NUMBER - remove expense with id NUMBER
      search QUERY - list expenses with a matching memo field
    HELP
  end
  
end

CLI.new.run(ARGV)